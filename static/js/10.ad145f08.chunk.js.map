{"version":3,"sources":["../static/js/10.ad145f08.chunk.js","scenes/Styletron/Block.js","scenes/Styletron/DifferentBlocks.js","scenes/Styletron/Probe.js","utils/colors.js","../node_modules/tinygradient/tinygradient.js","../node_modules/tinycolor2/tinycolor.js","../node_modules/tinycolor/tinycolor.js"],"names":["webpackJsonp","148","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_styletron_react__","__WEBPACK_IMPORTED_MODULE_1__utils_colors__","n","Block","props","minWidth","height","display","textAlign","padding","border","fontWeight","backgroundColor","isPrimary","i",":hover","color","165","__WEBPACK_IMPORTED_MODULE_2__config__","__WEBPACK_IMPORTED_MODULE_3__Block__","components","size","Math","round","component","borderSize","borderStyle","borderRadius","borderColor","push","166","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","Probe","_ref","onAnimationStart","a","createElement","style","animation","556","__WEBPACK_IMPORTED_MODULE_0__config__","__WEBPACK_IMPORTED_MODULE_1_tinygradient__","__WEBPACK_IMPORTED_MODULE_1_tinygradient___default","gradient1","rgb","gradient2","map","toHex","557","exports","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","undefined","apply","this","tinycolor","Utils","rgba_max","r","g","b","hsva_max","h","s","v","stepize","start","end","steps","step","k","hasOwnProperty","interpolate","max","stop1","stop2","toRgb","gradient","hsv","trigonometric","diff","toHsv","pow","abs","substeps","stops","l","length","parseInt","isNaN","Error","pos","totalSubsteps","min","indexOf","TinyGradient","arguments","Array","prototype","slice","call","havingPositions","p","stop","hasPosition","unshift","reverse","forEach","concat","mode","trig","parametrized","css","direction","toRgbString","colors","pop","558","opts","inputToRGB","_originalInput","_r","_g","_b","_a","_roundA","mathRound","_format","format","_gradientType","gradientType","_ok","ok","_tc_id","tinyCounter","stringInputToObject","isValidCSSUnit","rgbToRgb","String","substr","convertToPercentage","hsvToRgb","hslToRgb","boundAlpha","mathMin","mathMax","bound01","rgbToHsl","d","hue2rgb","q","t","rgbToHsv","floor","f","mod","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToHex","allow4Char","convertDecimalToHex","rgbaToArgbHex","desaturate","amount","hsl","toHsl","clamp01","saturate","greyscale","lighten","brighten","darken","spin","hue","complement","triad","tetrad","splitcomplement","analogous","results","slices","part","ret","monochromatic","modification","parseFloat","isOnePointZero","processPercent","isPercentage","val","parseIntFromHex","c","convertHexToDecimal","matchers","CSS_UNIT","exec","replace","trimLeft","trimRight","toLowerCase","named","names","match","rgba","hsla","hsva","hex8","hex6","hex4","hex3","validateWCAG2Parms","parms","level","toUpperCase","mathRandom","random","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","R","G","B","setAlpha","toHsvString","toHslString","toHexString","toHex8","toHex8String","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","_applyCombination","fromRatio","newColor","equals","color1","color2","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","wcag2Parms","out","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","o","flipped","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","RegExp","559","styles","bold","italic","underline","inverse","default","bgBlack","bgRed","bgGreen","bgYellow","bgBlue","bgMagenta","bgCyan","bgWhite","bgDefault","keys","get","enumerable"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,OAAO,GAC7C,IAAIC,GAAgDJ,EAAoB,KAEpEK,GADwDL,EAAoBM,EAAEF,GAChCJ,EAAoB,MCNrFO,EAAQN,OAAAG,EAAA,QAAO,MAAO,SAAAI,GAAA,OAC1BC,SAAU,OACVC,OAAQ,OACRC,QAAS,eACTC,UAAW,SACXC,QAAS,OACTC,OAAQ,OACRC,WAAY,OACZC,gBAAiBR,EAAMS,UAAYZ,EAAA,EAAOG,EAAMU,GAAG,GAAKb,EAAA,EAAOG,EAAMU,GAAG,GACxEC,UACEH,gBAAiB,mBACjBI,MAAO,WAIXrB,GAAA,WDJMsB,IACA,SAAUvB,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,OAAO,GEXlE,KAAK,GFYoBC,GAAgDJ,EAAoB,KAEpEK,GADwDL,EAAoBM,EAAEF,GAChCJ,EAAoB,MAClEsB,EAAwCtB,EAAoB,IAC5DuB,EAAuCvB,EAAoB,KElB9EwB,KAEGN,EAAI,EAAGA,EAAII,EAAA,EAAOG,KAAMP,KFiBL,SEjBnBA,GACP,GAAIO,GAAOC,KAAKC,MAAQT,EAAI,GAAM,EAAK,IAEjCU,EAAY3B,OAAAG,EAAA,QAAOmB,EAAA,QAAO,SAAAf,GAAA,OAC9BqB,WAAeJ,EAAO,EAAtB,MACAK,YAAa,QACbC,aAAwB,EAAPN,EAAjB,KACAO,YAAaxB,EAAMS,UAAYZ,EAAA,EAAOG,EAAMU,GAAG,GAAKb,EAAA,EAAOG,EAAMU,GAAG,GACpEC,UACEH,gBAAiB,mBACjBgB,YAAa,mBACbZ,MAAO,WAIXI,GAAWS,KAAKL,IAfTV,EAkBTnB,GAAA,WFGMmC,IACA,SAAUpC,EAAQC,EAAqBC,GAE7C,YACAC,QAAOC,eAAeH,EAAqB,cAAgBI,OAAO,GAC7C,IAAIgC,GAAsCnC,EAAoB,GAC1DoC,EAA8CpC,EAAoBM,EAAE6B,GG/BvFE,EAAQ,SAAAC,GAA0B,GAAvBC,GAAuBD,EAAvBC,gBACf,OACEH,GAAAI,EAAAC,cAAA,OACEF,iBAAkBA,EAClBG,OAASC,UAAW,qBAK1B5C,GAAA,WH4BM6C,IACA,SAAU9C,EAAQC,EAAqBC,GAE7C,YACqB,IAAI6C,GAAwC7C,EAAoB,IAC5D8C,EAA6C9C,EAAoB,KACjE+C,EAAqD/C,EAAoBM,EAAEwC,GI3ChGE,EAAYD,EAAAP,EAAaS,KAC1B,UAAW,UAAW,UAAW,UAAW,WAC7CJ,EAAA,EAAOpB,MAGLyB,EAAYH,EAAAP,EAAaS,KAC1B,UAAW,UAAW,UAAW,UAAW,WAC7CJ,EAAA,EAAOpB,KAGT1B,GAAA,EAAeiD,EAAUG,IAAI,SAAC/B,EAAOF,GACnC,OAAO,IAAKE,EAAMgC,QAAX,IAA0BF,EAAUhC,GAAGkC,YJqC1CC,IACA,SAAUvD,EAAQwD,EAAStD,GKpDjC,GAAAuD,GAAAC,EAAAC,GAMA,SAAAC,EAAAC,GACA,oBAAA7D,MAAAwD,QACAxD,EAAAwD,QAAAK,EAAA3D,EAAA,OAGAwD,GAAAxD,EAAA,MAAAuD,EAAA,MAAAK,MAAAH,EAAA,mBAAAF,KAAAM,MAAAP,EAAAE,GAAAD,KAAAzD,EAAAwD,QAAAG,KAKCK,EAAA,SAAAC,GACD,YAEA,IAAAC,IACAC,UAAmBC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAA5B,EAAA,GACnB6B,UAAmBC,EAAA,IAAAC,EAAA,EAAAC,EAAA,EAAAhC,EAAA,GASnBiC,QAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAC,KAEA,QAAAC,KAAAJ,GACAA,EAAAK,eAAAD,KACAD,EAAAC,IAAAH,EAAAG,GAAAJ,EAAAI,IAAAF,EAIA,OAAAC,IAWAG,YAAA,SAAAH,EAAAH,EAAAxD,EAAA+D,GACA,GAAA7D,KAEA,QAAA0D,KAAAJ,GACAA,EAAAK,eAAAD,KACA1D,EAAA0D,GAAAD,EAAAC,GAAA5D,EAAAwD,EAAAI,GACA1D,EAAA0D,GAAA1D,EAAA0D,GAAA,EAAA1D,EAAA0D,GAAAG,EAAAH,GAAA,GAAAG,EAAAH,GAAA1D,EAAA0D,GAAAG,EAAAH,GAAA1D,EAAA0D,GAIA,OAAA1D,IAUA6B,IAAA,SAAAiC,EAAAC,EAAAP,GAOA,OAFAxD,GAJAsD,EAAAQ,EAAA9D,MAAAgE,QACAT,EAAAQ,EAAA/D,MAAAgE,QACAC,GAAAH,EAAA9D,OACAyD,EAAAb,EAAAS,QAAAC,EAAAC,EAAAC,GAGA1D,EAAA,EAAyBA,EAAA0D,EAAS1D,IAClCE,EAAA4C,EAAAgB,YAAAH,EAAAH,EAAAxD,EAAA8C,EAAAC,UACAoB,EAAApD,KAAA8B,EAAA3C,GAGA,OAAAiE,IAWAC,IAAA,SAAAJ,EAAAC,EAAAP,EAAAW,GACA,GAIAC,GAAApE,EAJAsD,EAAAQ,EAAA9D,MAAAqE,QACAd,EAAAQ,EAAA/D,MAAAqE,QACAJ,GAAAH,EAAA9D,OACAyD,EAAAb,EAAAS,QAAAC,EAAAC,EAAAC,EAKAY,GADAd,EAAAJ,GAAAK,EAAAL,IAAAiB,GAAAb,EAAAJ,GAAAK,EAAAL,GAAAiB,EACAZ,EAAAL,EAAAI,EAAAJ,EAEAiB,EACA,IAAAZ,EAAAL,EAAAI,EAAAJ,EAGA,IAAAI,EAAAJ,EAAAK,EAAAL,EAEAO,EAAAP,EAAA5C,KAAAgE,KAAA,EAAAH,GAAA7D,KAAAiE,IAAAH,GAAA,EAAAZ,CAEA,QAAA1D,GAAA,EAAyBA,EAAA0D,EAAS1D,IAClCE,EAAA4C,EAAAgB,YAAAH,EAAAH,EAAAxD,EAAA8C,EAAAK,UACAgB,EAAApD,KAAA8B,EAAA3C,GAGA,OAAAiE,IASAO,SAAA,SAAAC,EAAAjB,GACA,GAAAkB,GAAAD,EAAAE,MAKA,IAFAnB,EAAAoB,SAAApB,GAEAqB,MAAArB,MAAA,EACA,SAAAsB,OAAA,gCAEA,IAAAtB,EAAAkB,EACA,SAAAI,OAAA,wDAMA,QAFAN,MAEA1E,EAAA,EAAyBA,EAAA4E,EAAK5E,IAAA,CAC9B,GAAA2D,IAAAD,EAAA,IAAAiB,EAAA3E,GAAAiF,IAAAN,EAAA3E,EAAA,GAAAiF,IACAP,GAAA3D,KAAAP,KAAAuD,IAAA,EAAAvD,KAAAC,MAAAkD,KAKA,OADAuB,GAAA,EACA9F,EAAAwF,EAAA,EAA2BxF,KAAK8F,GAAAR,EAAAtF,EAEhC,MAAA8F,GAAAxB,GACA,GAAAwB,EAAAxB,EAAA,CACA,GAAAyB,GAAA3E,KAAA2E,IAAAxC,MAAA,KAAA+B,EACAA,KAAAU,QAAAD,MACAD,QAEA,CACA,GAAAnB,GAAAvD,KAAAuD,IAAApB,MAAA,KAAA+B,EACAA,KAAAU,QAAArB,MACAmB,IAIA,MAAAR,KAQAW,EAAA,SAAAV,GAEA,MAAAW,UAAAT,OAAA,CACA,KAAAS,UAAA,YAAAC,QACA,SAAAP,OAAA,0BAEAL,GAAAW,UAAA,OAGAX,GAAAY,MAAAC,UAAAC,MAAAC,KAAAJ,UAIA,MAAA1C,eAAAyC,IACA,UAAAA,GAAAV,EAIA,IAAAA,EAAAE,OAAA,EACA,SAAAG,OAAA,gCAGA,IAAAW,OAAAjD,KAAAiC,EAAA,GAAAM,IACAL,EAAAD,EAAAE,OACAe,GAAA,CAEAhD,MAAA+B,QAAA1C,IAAA,SAAA4D,EAAA7F,GACA,GAAA8F,OAAApD,KAAAmD,EAAAZ,GACA,IAAAU,EAAAG,EACA,SAAAd,OAAA,uDAGA,IAAAc,EAAA,CAMA,GALAD,GACA3F,MAAA2C,EAAAgD,EAAA3F,OACA+E,IAAAY,EAAAZ,KAGAY,EAAAZ,IAAA,GAAAY,EAAAZ,IAAA,EACA,SAAAD,OAAA,gDAEA,IAAAa,EAAAZ,KAAAW,EACA,SAAAZ,OAAA,wCAEAY,GAAAC,EAAAZ,QAGAY,IACA3F,MAAA2C,EAAAgD,GACAZ,IAAAjF,GAAA4E,EAAA,GAIA,OAAAiB,KAGA,IAAAjD,KAAA+B,MAAA,GAAAM,KACArC,KAAA+B,MAAAoB,SACA7F,MAAA0C,KAAA+B,MAAA,GAAAzE,MACA+E,IAAA,IAGA,IAAArC,KAAA+B,MAAA/B,KAAA+B,MAAAE,OAAA,GAAAI,KACArC,KAAA+B,MAAA5D,MACAb,MAAA0C,KAAA+B,MAAA/B,KAAA+B,MAAAE,OAAA,GAAA3E,MACA+E,IAAA,IAyIA,OAhIAI,GAAAG,UAAAQ,QAAA,WACA,GAAArB,KASA,OAPA/B,MAAA+B,MAAAsB,QAAA,SAAAJ,GACAlB,EAAA5D,MACAb,MAAA2F,EAAA3F,MACA+E,IAAA,EAAAY,EAAAZ,QAIA,GAAAI,GAAAV,EAAAqB,YAQAX,EAAAG,UAAAzD,IAAA,SAAA2B,GAIA,OAHAgB,GAAA5B,EAAA4B,SAAA9B,KAAA+B,MAAAjB,GACAS,KAEAnE,EAAA,EAAA4E,EAAAhC,KAAA+B,MAAAE,OAA0C7E,EAAA4E,EAAA,EAAO5E,IACjDmE,IAAA+B,OAAApD,EAAAf,IAAAa,KAAA+B,MAAA3E,GAAA4C,KAAA+B,MAAA3E,EAAA,GAAA0E,EAAA1E,IAKA,OAFAmE,GAAApD,KAAA6B,KAAA+B,MAAAC,EAAA,GAAA1E,OAEAiE,GAaAkB,EAAAG,UAAApB,IAAA,SAAAV,EAAAyC,GAOA,OAFA3C,GAAAC,EAAA2C,EAJA1B,EAAA5B,EAAA4B,SAAA9B,KAAA+B,MAAAjB,GACAW,GAAA,IAAA8B,EACAE,EAAA,iBAAAF,GACAhC,KAGAnE,EAAA,EAAA4E,EAAAhC,KAAA+B,MAAAE,OAA0C7E,EAAA4E,EAAA,EAAO5E,IACjDwD,EAAAZ,KAAA+B,MAAA3E,GAAAE,MAAAqE,QACAd,EAAAb,KAAA+B,MAAA3E,EAAA,GAAAE,MAAAqE,QAEA8B,IACAD,EAAA5C,EAAAJ,EAAAK,EAAAL,GAAAK,EAAAL,EAAAI,EAAAJ,EAAA,KAAAI,EAAAJ,EAAAK,EAAAL,GAAAI,EAAAJ,EAAAK,EAAAL,EAAA,KAKAe,EADA,IAAAX,EAAAH,GAAA,IAAAI,EAAAJ,EACAc,EAAA+B,OAAApD,EAAAf,IAAAa,KAAA+B,MAAA3E,GAAA4C,KAAA+B,MAAA3E,EAAA,GAAA0E,EAAA1E,KAGAmE,EAAA+B,OAAApD,EAAAsB,IAAAxB,KAAA+B,MAAA3E,GAAA4C,KAAA+B,MAAA3E,EAAA,GAAA0E,EAAA1E,GACA,SAAAmG,GAAAC,GAAA,UAAAD,IAAAC,IAAAC,GAAAhC,GAOA,OAFAF,GAAApD,KAAA6B,KAAA+B,MAAAC,EAAA,GAAA1E,OAEAiE,GASAkB,EAAAG,UAAAc,IAAA,SAAAH,EAAAI,GACAJ,KAAA,SACAI,MAAA,UAAAJ,EAAA,+BAEA,IAAAG,GAAAH,EAAA,aAAAI,CAKA,OAJA3D,MAAA+B,MAAAsB,QAAA,SAAAJ,GACAS,GAAA,KAAAT,EAAA3F,MAAAsG,cAAA,QAAAX,EAAAZ,IAAA,MAEAqB,GAAA,KASAjB,EAAAtD,IAAA,SAAA0E,EAAA/C,GAIA,MAHA+C,GAAAlB,MAAAC,UAAAC,MAAAC,KAAAJ,WACA5B,EAAA+C,EAAAC,MAEArB,EAAA1C,MAAA,KAAA8D,GAAA1E,IAAA2B,IAOA2B,EAAAjB,IAAA,SAAAqC,EAAA/C,EAAAyC,GAKA,MAJAM,GAAAlB,MAAAC,UAAAC,MAAAC,KAAAJ,WACAa,EAAAM,EAAAC,MACAhD,EAAA+C,EAAAC,MAEArB,EAAA1C,MAAA,KAAA8D,GAAArC,IAAAV,EAAAyC,IAOAd,EAAAiB,IAAA,SAAAG,EAAAN,EAAAI,GAKA,MAJAE,GAAAlB,MAAAC,UAAAC,MAAAC,KAAAJ,WACAiB,EAAAE,EAAAC,MACAP,EAAAM,EAAAC,MAEArB,EAAA1C,MAAA,KAAA8D,GAAAH,IAAAH,EAAAI,IAKAlB,KL8DMsB,IACA,SAAU/H,EAAQwD,EAAStD,GMrbjC,GAAAyD,IAIA,SAAA/B,GAUA,QAAAqC,GAAA3C,EAAA0G,GAMA,GAJA1G,EAAA,MACA0G,QAGA1G,YAAA2C,GACA,MAAA3C,EAGA,MAAA0C,eAAAC,IACA,UAAAA,GAAA3C,EAAA0G,EAGA,IAAA7E,GAAA8E,EAAA3G,EACA0C,MAAAkE,eAAA5G,EACA0C,KAAAmE,GAAAhF,EAAAiB,EACAJ,KAAAoE,GAAAjF,EAAAkB,EACAL,KAAAqE,GAAAlF,EAAAmB,EACAN,KAAAsE,GAAAnF,EAAAT,EACAsB,KAAAuE,QAAAC,EAAA,IAAAxE,KAAAsE,IAAA,IACAtE,KAAAyE,QAAAT,EAAAU,QAAAvF,EAAAuF,OACA1E,KAAA2E,cAAAX,EAAAY,aAMA5E,KAAAmE,GAAA,IAAsBnE,KAAAmE,GAAAK,EAAAxE,KAAAmE,KACtBnE,KAAAoE,GAAA,IAAsBpE,KAAAoE,GAAAI,EAAAxE,KAAAoE,KACtBpE,KAAAqE,GAAA,IAAsBrE,KAAAqE,GAAAG,EAAAxE,KAAAqE,KAEtBrE,KAAA6E,IAAA1F,EAAA2F,GACA9E,KAAA+E,OAAAC,IAiQA,QAAAf,GAAA3G,GAEA,GAAA6B,IAAeiB,EAAA,EAAAC,EAAA,EAAAC,EAAA,GACf5B,EAAA,EACA+B,EAAA,KACAC,EAAA,KACAsB,EAAA,KACA8C,GAAA,EACAJ,GAAA,CAkCA,OAhCA,gBAAApH,KACAA,EAAA2H,EAAA3H,IAGA,gBAAAA,KACA4H,EAAA5H,EAAA8C,IAAA8E,EAAA5H,EAAA+C,IAAA6E,EAAA5H,EAAAgD,IACAnB,EAAAgG,EAAA7H,EAAA8C,EAAA9C,EAAA+C,EAAA/C,EAAAgD,GACAwE,GAAA,EACAJ,EAAA,MAAAU,OAAA9H,EAAA8C,GAAAiF,QAAA,iBAEAH,EAAA5H,EAAAkD,IAAA0E,EAAA5H,EAAAmD,IAAAyE,EAAA5H,EAAAoD,IACAD,EAAA6E,EAAAhI,EAAAmD,GACAC,EAAA4E,EAAAhI,EAAAoD,GACAvB,EAAAoG,EAAAjI,EAAAkD,EAAAC,EAAAC,GACAoE,GAAA,EACAJ,EAAA,OAEAQ,EAAA5H,EAAAkD,IAAA0E,EAAA5H,EAAAmD,IAAAyE,EAAA5H,EAAA0E,KACAvB,EAAA6E,EAAAhI,EAAAmD,GACAuB,EAAAsD,EAAAhI,EAAA0E,GACA7C,EAAAqG,EAAAlI,EAAAkD,EAAAC,EAAAuB,GACA8C,GAAA,EACAJ,EAAA,OAGApH,EAAA2D,eAAA,OACAvC,EAAApB,EAAAoB,IAIAA,EAAA+G,EAAA/G,IAGAoG,KACAJ,OAAApH,EAAAoH,UACAtE,EAAAsF,EAAA,IAAAC,EAAAxG,EAAAiB,EAAA,IACAC,EAAAqF,EAAA,IAAAC,EAAAxG,EAAAkB,EAAA,IACAC,EAAAoF,EAAA,IAAAC,EAAAxG,EAAAmB,EAAA,IACA5B,KAgBA,QAAAyG,GAAA/E,EAAAC,EAAAC,GACA,OACAF,EAAA,IAAAwF,EAAAxF,EAAA,KACAC,EAAA,IAAAuF,EAAAvF,EAAA,KACAC,EAAA,IAAAsF,EAAAtF,EAAA,MAQA,QAAAuF,GAAAzF,EAAAC,EAAAC,GAEAF,EAAAwF,EAAAxF,EAAA,KACAC,EAAAuF,EAAAvF,EAAA,KACAC,EAAAsF,EAAAtF,EAAA,IAEA,IACAE,GAAAC,EADAU,EAAAwE,EAAAvF,EAAAC,EAAAC,GAAAiC,EAAAmD,EAAAtF,EAAAC,EAAAC,GACA0B,GAAAb,EAAAoB,GAAA,CAEA,IAAApB,GAAAoB,EACA/B,EAAAC,EAAA,MAEA,CACA,GAAAqF,GAAA3E,EAAAoB,CAEA,QADA9B,EAAAuB,EAAA,GAAA8D,GAAA,EAAA3E,EAAAoB,GAAAuD,GAAA3E,EAAAoB,GACApB,GACA,IAAAf,GAAAI,GAAAH,EAAAC,GAAAwF,GAAAzF,EAAAC,EAAA,IAAsD,MACtD,KAAAD,GAAAG,GAAAF,EAAAF,GAAA0F,EAAA,CAAwC,MACxC,KAAAxF,GAAAE,GAAAJ,EAAAC,GAAAyF,EAAA,EAGAtF,GAAA,EAGA,OAAYA,IAAAC,IAAAuB,KAOZ,QAAAwD,GAAAhF,EAAAC,EAAAuB,GAOA,QAAA+D,GAAA/C,EAAAgD,EAAAC,GAGA,MAFAA,GAAA,IAAAA,GAAA,GACAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAjD,EAAA,GAAAgD,EAAAhD,GAAAiD,EACAA,EAAA,GAAAD,EACAC,EAAA,IAAAjD,GAAAgD,EAAAhD,IAAA,IAAAiD,GAAA,EACAjD,EAZA,GAAA5C,GAAAC,EAAAC,CAeA,IAbAE,EAAAoF,EAAApF,EAAA,KACAC,EAAAmF,EAAAnF,EAAA,KACAuB,EAAA4D,EAAA5D,EAAA,KAWA,IAAAvB,EACAL,EAAAC,EAAAC,EAAA0B,MAEA,CACA,GAAAgE,GAAAhE,EAAA,GAAAA,GAAA,EAAAvB,GAAAuB,EAAAvB,EAAAuB,EAAAvB,EACAuC,EAAA,EAAAhB,EAAAgE,CACA5F,GAAA2F,EAAA/C,EAAAgD,EAAAxF,EAAA,KACAH,EAAA0F,EAAA/C,EAAAgD,EAAAxF,GACAF,EAAAyF,EAAA/C,EAAAgD,EAAAxF,EAAA,KAGA,OAAYJ,EAAA,IAAAA,EAAAC,EAAA,IAAAA,EAAAC,EAAA,IAAAA,GAOZ,QAAA4F,GAAA9F,EAAAC,EAAAC,GAEAF,EAAAwF,EAAAxF,EAAA,KACAC,EAAAuF,EAAAvF,EAAA,KACAC,EAAAsF,EAAAtF,EAAA,IAEA,IACAE,GAAAC,EADAU,EAAAwE,EAAAvF,EAAAC,EAAAC,GAAAiC,EAAAmD,EAAAtF,EAAAC,EAAAC,GACAI,EAAAS,EAEA2E,EAAA3E,EAAAoB,CAGA,IAFA9B,EAAA,IAAAU,EAAA,EAAA2E,EAAA3E,EAEAA,GAAAoB,EACA/B,EAAA,MAEA,CACA,OAAAW,GACA,IAAAf,GAAAI,GAAAH,EAAAC,GAAAwF,GAAAzF,EAAAC,EAAA,IAAsD,MACtD,KAAAD,GAAAG,GAAAF,EAAAF,GAAA0F,EAAA,CAAwC,MACxC,KAAAxF,GAAAE,GAAAJ,EAAAC,GAAAyF,EAAA,EAEAtF,GAAA,EAEA,OAAYA,IAAAC,IAAAC,KAOZ,QAAA6E,GAAA/E,EAAAC,EAAAC,GAEAF,EAAA,EAAAoF,EAAApF,EAAA,KACAC,EAAAmF,EAAAnF,EAAA,KACAC,EAAAkF,EAAAlF,EAAA,IAEA,IAAAtD,GAAAQ,EAAAuI,MAAA3F,GACA4F,EAAA5F,EAAApD,EACA4F,EAAAtC,GAAA,EAAAD,GACAuF,EAAAtF,GAAA,EAAA0F,EAAA3F,GACAwF,EAAAvF,GAAA,KAAA0F,GAAA3F,GACA4F,EAAAjJ,EAAA,CAKA,QAAYgD,EAAA,KAJZM,EAAAsF,EAAAhD,IAAAiD,EAAAvF,GAAA2F,GAIYhG,EAAA,KAHZ4F,EAAAvF,IAAAsF,EAAAhD,KAAAqD,GAGY/F,EAAA,KAFZ0C,IAAAiD,EAAAvF,IAAAsF,GAAAK,IASA,QAAAC,GAAAlG,EAAAC,EAAAC,EAAAiG,GAEA,GAAAC,IACAC,EAAAjC,EAAApE,GAAAsG,SAAA,KACAD,EAAAjC,EAAAnE,GAAAqG,SAAA,KACAD,EAAAjC,EAAAlE,GAAAoG,SAAA,KAIA,OAAAH,IAAAC,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,GACAH,EAAA,GAAAG,OAAA,GAAAH,EAAA,GAAAG,OAAA,GAAAH,EAAA,GAAAG,OAAA,GAGAH,EAAAI,KAAA,IAOA,QAAAC,GAAAzG,EAAAC,EAAAC,EAAA5B,EAAAoI,GAEA,GAAAN,IACAC,EAAAjC,EAAApE,GAAAsG,SAAA,KACAD,EAAAjC,EAAAnE,GAAAqG,SAAA,KACAD,EAAAjC,EAAAlE,GAAAoG,SAAA,KACAD,EAAAM,EAAArI,IAIA,OAAAoI,IAAAN,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,IAAAH,EAAA,GAAAG,OAAA,GACAH,EAAA,GAAAG,OAAA,GAAAH,EAAA,GAAAG,OAAA,GAAAH,EAAA,GAAAG,OAAA,GAAAH,EAAA,GAAAG,OAAA,GAGAH,EAAAI,KAAA,IAMA,QAAAI,GAAA5G,EAAAC,EAAAC,EAAA5B,GASA,OANA+H,EAAAM,EAAArI,IACA+H,EAAAjC,EAAApE,GAAAsG,SAAA,KACAD,EAAAjC,EAAAnE,GAAAqG,SAAA,KACAD,EAAAjC,EAAAlE,GAAAoG,SAAA,MAGAE,KAAA,IAwBA,QAAAK,GAAA3J,EAAA4J,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EACA,IAAAC,GAAAlH,EAAA3C,GAAA8J,OAGA,OAFAD,GAAA1G,GAAAyG,EAAA,IACAC,EAAA1G,EAAA4G,EAAAF,EAAA1G,GACAR,EAAAkH,GAGA,QAAAG,GAAAhK,EAAA4J,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EACA,IAAAC,GAAAlH,EAAA3C,GAAA8J,OAGA,OAFAD,GAAA1G,GAAAyG,EAAA,IACAC,EAAA1G,EAAA4G,EAAAF,EAAA1G,GACAR,EAAAkH,GAGA,QAAAI,GAAAjK,GACA,MAAA2C,GAAA3C,GAAA2J,WAAA,KAGA,QAAAO,GAAAlK,EAAA4J,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EACA,IAAAC,GAAAlH,EAAA3C,GAAA8J,OAGA,OAFAD,GAAAnF,GAAAkF,EAAA,IACAC,EAAAnF,EAAAqF,EAAAF,EAAAnF,GACA/B,EAAAkH,GAGA,QAAAM,GAAAnK,EAAA4J,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EACA,IAAA/H,GAAAc,EAAA3C,GAAAgE,OAIA,OAHAnC,GAAAiB,EAAAuF,EAAA,EAAAD,EAAA,IAAAvG,EAAAiB,EAAAoE,GAAA0C,EAAA,WACA/H,EAAAkB,EAAAsF,EAAA,EAAAD,EAAA,IAAAvG,EAAAkB,EAAAmE,GAAA0C,EAAA,WACA/H,EAAAmB,EAAAqF,EAAA,EAAAD,EAAA,IAAAvG,EAAAmB,EAAAkE,GAAA0C,EAAA,WACAjH,EAAAd,GAGA,QAAAuI,GAAApK,EAAA4J,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EACA,IAAAC,GAAAlH,EAAA3C,GAAA8J,OAGA,OAFAD,GAAAnF,GAAAkF,EAAA,IACAC,EAAAnF,EAAAqF,EAAAF,EAAAnF,GACA/B,EAAAkH,GAKA,QAAAQ,GAAArK,EAAA4J,GACA,GAAAC,GAAAlH,EAAA3C,GAAA8J,QACAQ,GAAAT,EAAA3G,EAAA0G,GAAA,GAEA,OADAC,GAAA3G,EAAAoH,EAAA,MAAAA,IACA3H,EAAAkH,GAQA,QAAAU,GAAAvK,GACA,GAAA6J,GAAAlH,EAAA3C,GAAA8J,OAEA,OADAD,GAAA3G,GAAA2G,EAAA3G,EAAA,SACAP,EAAAkH,GAGA,QAAAW,GAAAxK,GACA,GAAA6J,GAAAlH,EAAA3C,GAAA8J,QACA5G,EAAA2G,EAAA3G,CACA,QACAP,EAAA3C,GACA2C,GAAmBO,KAAA,SAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,IACnB/B,GAAmBO,KAAA,SAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,KAInB,QAAA+F,GAAAzK,GACA,GAAA6J,GAAAlH,EAAA3C,GAAA8J,QACA5G,EAAA2G,EAAA3G,CACA,QACAP,EAAA3C,GACA2C,GAAmBO,KAAA,QAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,IACnB/B,GAAmBO,KAAA,SAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,IACnB/B,GAAmBO,KAAA,SAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,KAInB,QAAAgG,GAAA1K,GACA,GAAA6J,GAAAlH,EAAA3C,GAAA8J,QACA5G,EAAA2G,EAAA3G,CACA,QACAP,EAAA3C,GACA2C,GAAmBO,KAAA,QAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,IACnB/B,GAAmBO,KAAA,SAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,KAInB,QAAAiG,GAAA3K,EAAA4K,EAAAC,GACAD,KAAA,EACAC,KAAA,EAEA,IAAAhB,GAAAlH,EAAA3C,GAAA8J,QACAgB,EAAA,IAAAD,EACAE,GAAApI,EAAA3C,GAEA,KAAA6J,EAAA3G,GAAA2G,EAAA3G,GAAA4H,EAAAF,GAAA,cAA+DA,GAC/Df,EAAA3G,GAAA2G,EAAA3G,EAAA4H,GAAA,IACAC,EAAAlK,KAAA8B,EAAAkH,GAEA,OAAAkB,GAGA,QAAAC,GAAAhL,EAAA4K,GACAA,KAAA,CAMA,KALA,GAAA1G,GAAAvB,EAAA3C,GAAAqE,QACAnB,EAAAgB,EAAAhB,EAAAC,EAAAe,EAAAf,EAAAC,EAAAc,EAAAd,EACA2H,KACAE,EAAA,EAAAL,EAEAA,KACAG,EAAAlK,KAAA8B,GAA4BO,IAAAC,IAAAC,OAC5BA,KAAA6H,GAAA,CAGA,OAAAF,GAyRA,QAAA5C,GAAA/G,GAOA,MANAA,GAAA8J,WAAA9J,IAEAyD,MAAAzD,MAAA,GAAAA,EAAA,KACAA,EAAA,GAGAA,EAIA,QAAAkH,GAAApJ,EAAA2E,GACAsH,EAAAjM,KAA4BA,EAAA,OAE5B,IAAAkM,GAAAC,EAAAnM,EASA,OARAA,GAAAkJ,EAAAvE,EAAAwE,EAAA,EAAA6C,WAAAhM,KAGAkM,IACAlM,EAAA0F,SAAA1F,EAAA2E,EAAA,SAIAvD,EAAAiE,IAAArF,EAAA2E,GAAA,KACA,EAIA3E,EAAA2E,EAAAqH,WAAArH,GAIA,QAAAkG,GAAAuB,GACA,MAAAlD,GAAA,EAAAC,EAAA,EAAAiD,IAIA,QAAAC,GAAAD,GACA,MAAA1G,UAAA0G,EAAA,IAKA,QAAAH,GAAAjM,GACA,sBAAAA,KAAA,GAAAA,EAAAgG,QAAA,UAAAgG,WAAAhM,GAIA,QAAAmM,GAAAnM,GACA,uBAAAA,KAAA,GAAAA,EAAAgG,QAAA,KAIA,QAAAiE,GAAAqC,GACA,UAAAA,EAAA7G,OAAA,IAAA6G,EAAA,GAAAA,EAIA,QAAAxD,GAAA9I,GAKA,MAJAA,IAAA,IACAA,EAAA,IAAAA,EAAA,KAGAA,EAIA,QAAAuK,GAAAjB,GACA,MAAAlI,GAAAC,MAAA,IAAA2K,WAAA1C,IAAAY,SAAA,IAGA,QAAAqC,GAAAvI,GACA,MAAAqI,GAAArI,GAAA,IAsCA,QAAA0E,GAAA5H,GACA,QAAA0L,EAAAC,SAAAC,KAAA5L,GAMA,QAAA2H,GAAA3H,GAEAA,IAAA6L,QAAAC,EAAA,IAAAD,QAAAE,EAAA,IAAAC,aACA,IAAAC,IAAA,CACA,IAAAC,EAAAlM,GACAA,EAAAkM,EAAAlM,GACAiM,GAAA,MAEA,mBAAAjM,EACA,OAAgB8C,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAA5B,EAAA,EAAAgG,OAAA,OAOhB,IAAA+E,EACA,QAAAA,EAAAT,EAAA7J,IAAA+J,KAAA5L,KACgB8C,EAAAqJ,EAAA,GAAApJ,EAAAoJ,EAAA,GAAAnJ,EAAAmJ,EAAA,KAEhBA,EAAAT,EAAAU,KAAAR,KAAA5L,KACgB8C,EAAAqJ,EAAA,GAAApJ,EAAAoJ,EAAA,GAAAnJ,EAAAmJ,EAAA,GAAA/K,EAAA+K,EAAA,KAEhBA,EAAAT,EAAA7B,IAAA+B,KAAA5L,KACgBkD,EAAAiJ,EAAA,GAAAhJ,EAAAgJ,EAAA,GAAAzH,EAAAyH,EAAA,KAEhBA,EAAAT,EAAAW,KAAAT,KAAA5L,KACgBkD,EAAAiJ,EAAA,GAAAhJ,EAAAgJ,EAAA,GAAAzH,EAAAyH,EAAA,GAAA/K,EAAA+K,EAAA,KAEhBA,EAAAT,EAAAxH,IAAA0H,KAAA5L,KACgBkD,EAAAiJ,EAAA,GAAAhJ,EAAAgJ,EAAA,GAAA/I,EAAA+I,EAAA,KAEhBA,EAAAT,EAAAY,KAAAV,KAAA5L,KACgBkD,EAAAiJ,EAAA,GAAAhJ,EAAAgJ,EAAA,GAAA/I,EAAA+I,EAAA,GAAA/K,EAAA+K,EAAA,KAEhBA,EAAAT,EAAAa,KAAAX,KAAA5L,KAEA8C,EAAAyI,EAAAY,EAAA,IACApJ,EAAAwI,EAAAY,EAAA,IACAnJ,EAAAuI,EAAAY,EAAA,IACA/K,EAAAqK,EAAAU,EAAA,IACA/E,OAAA6E,EAAA,gBAGAE,EAAAT,EAAAc,KAAAZ,KAAA5L,KAEA8C,EAAAyI,EAAAY,EAAA,IACApJ,EAAAwI,EAAAY,EAAA,IACAnJ,EAAAuI,EAAAY,EAAA,IACA/E,OAAA6E,EAAA,eAGAE,EAAAT,EAAAe,KAAAb,KAAA5L,KAEA8C,EAAAyI,EAAAY,EAAA,MAAAA,EAAA,IACApJ,EAAAwI,EAAAY,EAAA,MAAAA,EAAA,IACAnJ,EAAAuI,EAAAY,EAAA,MAAAA,EAAA,IACA/K,EAAAqK,EAAAU,EAAA,MAAAA,EAAA,IACA/E,OAAA6E,EAAA,kBAGAE,EAAAT,EAAAgB,KAAAd,KAAA5L,MAEA8C,EAAAyI,EAAAY,EAAA,MAAAA,EAAA,IACApJ,EAAAwI,EAAAY,EAAA,MAAAA,EAAA,IACAnJ,EAAAuI,EAAAY,EAAA,MAAAA,EAAA,IACA/E,OAAA6E,EAAA,cAOA,QAAAU,GAAAC,GAGA,GAAAC,GAAAxM,CAUA,OATAuM,OAAsBC,MAAA,KAAAxM,KAAA,SACtBwM,GAAAD,EAAAC,OAAA,MAAAC,cACAzM,GAAAuM,EAAAvM,MAAA,SAAA2L,cACA,OAAAa,GAAA,QAAAA,IACAA,EAAA,MAEA,UAAAxM,GAAA,UAAAA,IACAA,EAAA,UAEYwM,QAAAxM,QAppCZ,GAAAyL,GAAA,OACAC,EAAA,OACArE,EAAA,EACAR,EAAA5G,EAAAC,MACA6H,EAAA9H,EAAA2E,IACAoD,EAAA/H,EAAAuD,IACAkJ,EAAAzM,EAAA0M,MAsCArK,GAAA2C,WACA2H,OAAA,WACA,MAAAvK,MAAAwK,gBAAA,KAEAC,QAAA,WACA,OAAAzK,KAAAuK,UAEAG,QAAA,WACA,MAAA1K,MAAA6E,KAEA8F,iBAAA,WACA,MAAA3K,MAAAkE,gBAEA0G,UAAA,WACA,MAAA5K,MAAAyE,SAEAoG,SAAA,WACA,MAAA7K,MAAAsE,IAEAkG,cAAA,WAEA,GAAArL,GAAAa,KAAAsB,OACA,YAAAnC,EAAAiB,EAAA,IAAAjB,EAAAkB,EAAA,IAAAlB,EAAAmB,GAAA,KAEAwK,aAAA,WAEA,GACAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EADAjM,EAAAa,KAAAsB,OASA,OAPAyJ,GAAA5L,EAAAiB,EAAA,IACA4K,EAAA7L,EAAAkB,EAAA,IACA4K,EAAA9L,EAAAmB,EAAA,IAE+B4K,EAA/BH,GAAA,OAA+BA,EAAA,MAA0BnN,EAAAgE,KAAAmJ,EAAA,iBAC1BI,EAA/BH,GAAA,OAA+BA,EAAA,MAA0BpN,EAAAgE,KAAAoJ,EAAA,iBAC1BI,EAA/BH,GAAA,OAA+BA,EAAA,MAA0BrN,EAAAgE,KAAAqJ,EAAA,iBACzD,MAAAC,EAAA,MAAAC,EAAA,MAAAC,GAEAC,SAAA,SAAAhP,GAGA,MAFA2D,MAAAsE,GAAAmB,EAAApJ,GACA2D,KAAAuE,QAAAC,EAAA,IAAAxE,KAAAsE,IAAA,IACAtE,MAEA2B,MAAA,WACA,GAAAH,GAAA0E,EAAAlG,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,GACA,QAAgB7D,EAAA,IAAAgB,EAAAhB,EAAAC,EAAAe,EAAAf,EAAAC,EAAAc,EAAAd,EAAAhC,EAAAsB,KAAAsE,KAEhBgH,YAAA,WACA,GAAA9J,GAAA0E,EAAAlG,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,IACA7D,EAAAgE,EAAA,IAAAhD,EAAAhB,GAAAC,EAAA+D,EAAA,IAAAhD,EAAAf,GAAAC,EAAA8D,EAAA,IAAAhD,EAAAd,EACA,WAAAV,KAAAsE,GACA,OAAA9D,EAAA,KAAAC,EAAA,MAAAC,EAAA,KACA,QAAAF,EAAA,KAAAC,EAAA,MAAAC,EAAA,MAAAV,KAAAuE,QAAA,KAEA6C,MAAA,WACA,GAAAD,GAAAtB,EAAA7F,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,GACA,QAAgB7D,EAAA,IAAA2G,EAAA3G,EAAAC,EAAA0G,EAAA1G,EAAAuB,EAAAmF,EAAAnF,EAAAtD,EAAAsB,KAAAsE,KAEhBiH,YAAA,WACA,GAAApE,GAAAtB,EAAA7F,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,IACA7D,EAAAgE,EAAA,IAAA2C,EAAA3G,GAAAC,EAAA+D,EAAA,IAAA2C,EAAA1G,GAAAuB,EAAAwC,EAAA,IAAA2C,EAAAnF,EACA,WAAAhC,KAAAsE,GACA,OAAA9D,EAAA,KAAAC,EAAA,MAAAuB,EAAA,KACA,QAAAxB,EAAA,KAAAC,EAAA,MAAAuB,EAAA,MAAAhC,KAAAuE,QAAA,KAEAjF,MAAA,SAAAiH,GACA,MAAAD,GAAAtG,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,GAAAkC,IAEAiF,YAAA,SAAAjF,GACA,UAAAvG,KAAAV,MAAAiH,IAEAkF,OAAA,SAAA3E,GACA,MAAAD,GAAA7G,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,GAAArE,KAAAsE,GAAAwC,IAEA4E,aAAA,SAAA5E,GACA,UAAA9G,KAAAyL,OAAA3E,IAEAxF,MAAA,WACA,OAAgBlB,EAAAoE,EAAAxE,KAAAmE,IAAA9D,EAAAmE,EAAAxE,KAAAoE,IAAA9D,EAAAkE,EAAAxE,KAAAqE,IAAA3F,EAAAsB,KAAAsE,KAEhBV,YAAA,WACA,UAAA5D,KAAAsE,GACA,OAAAE,EAAAxE,KAAAmE,IAAA,KAAAK,EAAAxE,KAAAoE,IAAA,KAAAI,EAAAxE,KAAAqE,IAAA,IACA,QAAAG,EAAAxE,KAAAmE,IAAA,KAAAK,EAAAxE,KAAAoE,IAAA,KAAAI,EAAAxE,KAAAqE,IAAA,KAAArE,KAAAuE,QAAA,KAEAoH,gBAAA,WACA,OAAgBvL,EAAAoE,EAAA,IAAAoB,EAAA5F,KAAAmE,GAAA,UAAA9D,EAAAmE,EAAA,IAAAoB,EAAA5F,KAAAoE,GAAA,UAAA9D,EAAAkE,EAAA,IAAAoB,EAAA5F,KAAAqE,GAAA,UAAA3F,EAAAsB,KAAAsE,KAEhBsH,sBAAA,WACA,UAAA5L,KAAAsE,GACA,OAAAE,EAAA,IAAAoB,EAAA5F,KAAAmE,GAAA,YAAAK,EAAA,IAAAoB,EAAA5F,KAAAoE,GAAA,YAAAI,EAAA,IAAAoB,EAAA5F,KAAAqE,GAAA,WACA,QAAAG,EAAA,IAAAoB,EAAA5F,KAAAmE,GAAA,YAAAK,EAAA,IAAAoB,EAAA5F,KAAAoE,GAAA,YAAAI,EAAA,IAAAoB,EAAA5F,KAAAqE,GAAA,YAAArE,KAAAuE,QAAA,KAEAsH,OAAA,WACA,WAAA7L,KAAAsE,GACA,gBAGAtE,KAAAsE,GAAA,KAIAwH,EAAAxF,EAAAtG,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,IAAA,UAEA0H,SAAA,SAAAC,GACA,GAAAC,GAAA,IAAAjF,EAAAhH,KAAAmE,GAAAnE,KAAAoE,GAAApE,KAAAqE,GAAArE,KAAAsE,IACA4H,EAAAD,EACArH,EAAA5E,KAAA2E,cAAA,uBAEA,IAAAqH,EAAA,CACA,GAAAvL,GAAAR,EAAA+L,EACAE,GAAA,IAAAlF,EAAAvG,EAAA0D,GAAA1D,EAAA2D,GAAA3D,EAAA4D,GAAA5D,EAAA6D,IAGA,oDAAAM,EAAA,iBAAAqH,EAAA,gBAAAC,EAAA,KAEAxF,SAAA,SAAAhC,GACA,GAAAyH,KAAAzH,CACAA,MAAA1E,KAAAyE,OAEA,IAAA2H,IAAA,EACAC,EAAArM,KAAAsE,GAAA,GAAAtE,KAAAsE,IAAA,CAGA,OAFA6H,KAAAE,GAAA,QAAA3H,GAAA,SAAAA,GAAA,SAAAA,GAAA,SAAAA,GAAA,SAAAA,GAAA,SAAAA,GAUA,QAAAA,IACA0H,EAAApM,KAAA4D,eAEA,SAAAc,IACA0H,EAAApM,KAAA4L,yBAEA,QAAAlH,GAAA,SAAAA,IACA0H,EAAApM,KAAAwL,eAEA,SAAA9G,IACA0H,EAAApM,KAAAwL,aAAA,IAEA,SAAA9G,IACA0H,EAAApM,KAAA0L,cAAA,IAEA,SAAAhH,IACA0H,EAAApM,KAAA0L,gBAEA,SAAAhH,IACA0H,EAAApM,KAAA6L,UAEA,QAAAnH,IACA0H,EAAApM,KAAAuL,eAEA,QAAA7G,IACA0H,EAAApM,KAAAsL,eAGAc,GAAApM,KAAAwL,eAjCA,SAAA9G,GAAA,IAAA1E,KAAAsE,GACAtE,KAAA6L,SAEA7L,KAAA4D,eAgCA0I,MAAA,WACA,MAAArM,GAAAD,KAAA0G,aAGA6F,mBAAA,SAAAC,EAAAC,GACA,GAAAnP,GAAAkP,EAAAzM,MAAA,MAAAC,MAAAsD,UAAAT,MAAAC,KAAA2J,IAKA,OAJAzM,MAAAmE,GAAA7G,EAAA6G,GACAnE,KAAAoE,GAAA9G,EAAA8G,GACApE,KAAAqE,GAAA/G,EAAA+G,GACArE,KAAAqL,SAAA/N,EAAAgH,IACAtE,MAEAwH,QAAA,WACA,MAAAxH,MAAAuM,mBAAA/E,EAAA9E,YAEA+E,SAAA,WACA,MAAAzH,MAAAuM,mBAAA9E,EAAA/E,YAEAgF,OAAA,WACA,MAAA1H,MAAAuM,mBAAA7E,EAAAhF,YAEAuE,WAAA,WACA,MAAAjH,MAAAuM,mBAAAtF,EAAAvE,YAEA4E,SAAA,WACA,MAAAtH,MAAAuM,mBAAAjF,EAAA5E,YAEA6E,UAAA,WACA,MAAAvH,MAAAuM,mBAAAhF,EAAA7E,YAEAiF,KAAA,WACA,MAAA3H,MAAAuM,mBAAA5E,EAAAjF,YAGAgK,kBAAA,SAAAF,EAAAC,GACA,MAAAD,GAAAzM,MAAA,MAAAC,MAAAsD,UAAAT,MAAAC,KAAA2J,MAEAxE,UAAA,WACA,MAAAjI,MAAA0M,kBAAAzE,EAAAvF,YAEAmF,WAAA,WACA,MAAA7H,MAAA0M,kBAAA7E,EAAAnF,YAEA4F,cAAA,WACA,MAAAtI,MAAA0M,kBAAApE,EAAA5F,YAEAsF,gBAAA,WACA,MAAAhI,MAAA0M,kBAAA1E,EAAAtF,YAEAoF,MAAA,WACA,MAAA9H,MAAA0M,kBAAA5E,EAAApF,YAEAqF,OAAA,WACA,MAAA/H,MAAA0M,kBAAA3E,EAAArF,aAMAzC,EAAA0M,UAAA,SAAArP,EAAA0G,GACA,mBAAA1G,GAAA,CACA,GAAAsP,KACA,QAAAxP,KAAAE,GACAA,EAAA2D,eAAA7D,KAEAwP,EAAAxP,GADA,MAAAA,EACAE,EAAAF,GAGAkI,EAAAhI,EAAAF,IAIAE,GAAAsP,EAGA,MAAA3M,GAAA3C,EAAA0G,IA0QA/D,EAAA4M,OAAA,SAAAC,EAAAC,GACA,SAAAD,IAAAC,IACA9M,EAAA6M,GAAAlJ,eAAA3D,EAAA8M,GAAAnJ,eAGA3D,EAAAqK,OAAA,WACA,MAAArK,GAAA0M,WACAvM,EAAAiK,IACAhK,EAAAgK,IACA/J,EAAA+J,OA2IApK,EAAA+M,IAAA,SAAAF,EAAAC,EAAA7F,GACAA,EAAA,IAAAA,EAAA,EAAAA,GAAA,EAEA,IAAA+F,GAAAhN,EAAA6M,GAAAxL,QACA4L,EAAAjN,EAAA8M,GAAAzL,QAEA0B,EAAAkE,EAAA,GASA,OAAAjH,IANAG,GAAA8M,EAAA9M,EAAA6M,EAAA7M,GAAA4C,EAAAiK,EAAA7M,EACAC,GAAA6M,EAAA7M,EAAA4M,EAAA5M,GAAA2C,EAAAiK,EAAA5M,EACAC,GAAA4M,EAAA5M,EAAA2M,EAAA3M,GAAA0C,EAAAiK,EAAA3M,EACA5B,GAAAwO,EAAAxO,EAAAuO,EAAAvO,GAAAsE,EAAAiK,EAAAvO,KAaAuB,EAAAkN,YAAA,SAAAL,EAAAC,GACA,GAAAK,GAAAnN,EAAA6M,GACAO,EAAApN,EAAA8M,EACA,QAAAnP,EAAAuD,IAAAiM,EAAAtC,eAAAuC,EAAAvC,gBAAA,MAAAlN,EAAA2E,IAAA6K,EAAAtC,eAAAuC,EAAAvC,gBAAA,MAaA7K,EAAAqN,WAAA,SAAAR,EAAAC,EAAAQ,GACA,GACAC,GAAAC,EADAN,EAAAlN,EAAAkN,YAAAL,EAAAC,EAMA,QAHAU,GAAA,EAEAD,EAAAvD,EAAAsD,GACAC,EAAArD,MAAAqD,EAAA7P,MACA,cACA,eACA8P,EAAAN,GAAA,GACA,MACA,eACAM,EAAAN,GAAA,CACA,MACA,gBACAM,EAAAN,GAAA,EAGA,MAAAM,IAaAxN,EAAAyN,aAAA,SAAAC,EAAAC,EAAAnB,GACA,GAEAU,GACAU,EAAA1D,EAAAxM,EAHAmQ,EAAA,KACAC,EAAA,CAGAtB,SACAoB,EAAApB,EAAAoB,sBACA1D,EAAAsC,EAAAtC,MACAxM,EAAA8O,EAAA9O,IAEA,QAAAP,GAAA,EAAkBA,EAAAwQ,EAAA3L,OAAuB7E,KACzC+P,EAAAlN,EAAAkN,YAAAQ,EAAAC,EAAAxQ,KACA2Q,IACAA,EAAAZ,EACAW,EAAA7N,EAAA2N,EAAAxQ,IAIA,OAAA6C,GAAAqN,WAAAK,EAAAG,GAAoD3D,QAAAxM,WAA0BkQ,EAC9EC,GAGArB,EAAAoB,uBAAA,EACA5N,EAAAyN,aAAAC,GAAA,eAAAlB,IAQA,IAAAjD,GAAAvJ,EAAAuJ,OACAwE,UAAA,SACAC,aAAA,SACAC,KAAA,MACAC,WAAA,SACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,MACAC,eAAA,SACAC,KAAA,MACAC,WAAA,SACAC,MAAA,SACAC,UAAA,SACAC,YAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,MAAA,SACAC,eAAA,SACAC,SAAA,SACAC,QAAA,SACAC,KAAA,MACAC,SAAA,SACAC,SAAA,SACAC,cAAA,SACAC,SAAA,SACAC,UAAA,SACAC,SAAA,SACAC,UAAA,SACAC,YAAA,SACAC,eAAA,SACAC,WAAA,SACAC,WAAA,SACAC,QAAA,SACAC,WAAA,SACAC,aAAA,SACAC,cAAA,SACAC,cAAA,SACAC,cAAA,SACAC,cAAA,SACAC,WAAA,SACAC,SAAA,SACAC,YAAA,SACAC,QAAA,SACAC,QAAA,SACAC,WAAA,SACAC,UAAA,SACAC,YAAA,SACAC,YAAA,SACAC,QAAA,MACAC,UAAA,SACAC,WAAA,SACAC,KAAA,SACAC,UAAA,SACAC,KAAA,SACAC,MAAA,SACAC,YAAA,SACAC,KAAA,SACAC,SAAA,SACAC,QAAA,SACAC,UAAA,SACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,SAAA,SACAC,cAAA,SACAC,UAAA,SACAC,aAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,qBAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,UAAA,SACAC,YAAA,SACAC,cAAA,SACAC,aAAA,SACAC,eAAA,MACAC,eAAA,MACAC,eAAA,SACAC,YAAA,SACAC,KAAA,MACAC,UAAA,SACAC,MAAA,SACAC,QAAA,MACAC,OAAA,SACAC,iBAAA,SACAC,WAAA,SACAC,aAAA,SACAC,aAAA,SACAC,eAAA,SACAC,gBAAA,SACAC,kBAAA,SACAC,gBAAA,SACAC,gBAAA,SACAC,aAAA,SACAC,UAAA,SACAC,UAAA,SACAC,SAAA,SACAC,YAAA,SACAC,KAAA,SACAC,QAAA,SACAC,MAAA,SACAC,UAAA,SACAC,OAAA,SACAC,UAAA,SACAC,OAAA,SACAC,cAAA,SACAC,UAAA,SACAC,cAAA,SACAC,cAAA,SACAC,WAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,WAAA,SACAC,OAAA,SACAC,cAAA,SACAC,IAAA,MACAC,UAAA,SACAC,UAAA,SACAC,YAAA,SACAC,OAAA,SACAC,WAAA,SACAC,SAAA,SACAC,SAAA,SACAC,OAAA,SACAC,OAAA,SACAC,QAAA,SACAC,UAAA,SACAC,UAAA,SACAC,UAAA,SACAC,KAAA,SACAC,YAAA,SACAC,UAAA,SACAC,IAAA,SACAC,KAAA,SACAC,QAAA,SACAC,OAAA,SACAC,UAAA,SACAC,OAAA,SACAC,MAAA,SACAC,MAAA,MACAC,WAAA,SACAC,OAAA,MACAC,YAAA,UAIAtL,EAAA7L,EAAA6L,SAOA,SAAAuL,GACA,GAAAC,KACA,QAAAla,KAAAia,GACAA,EAAApW,eAAA7D,KACAka,EAAAD,EAAAja,MAGA,OAAAka,IAdA9N,GA6FAR,EAAA,WAGA,GAMAC,GAAA,6CAKAsO,EAAA,cAAAtO,EAAA,aAAAA,EAAA,aAAAA,EAAA,YACAuO,EAAA,cAAAvO,EAAA,aAAAA,EAAA,aAAAA,EAAA,aAAAA,EAAA,WAEA,QACAA,SAAA,GAAAwO,QAAAxO,GACA9J,IAAA,GAAAsY,QAAA,MAAAF,GACA7N,KAAA,GAAA+N,QAAA,OAAAD,GACArQ,IAAA,GAAAsQ,QAAA,MAAAF,GACA5N,KAAA,GAAA8N,QAAA,OAAAD,GACAhW,IAAA,GAAAiW,QAAA,MAAAF,GACA3N,KAAA,GAAA6N,QAAA,OAAAD,GACAxN,KAAA,uDACAF,KAAA,uDACAC,KAAA,uEACAF,KAAA,0EAwGA,qBAAA7N,MAAAwD,QACAxD,EAAAwD,QAAAS,MAI0CH,MAA1CH,EAAA,WAAwB,MAAAM,IAAkB6C,KAAAtD,EAAAtD,EAAAsD,EAAAxD,QAAAwD,QAAAG,IAOzC/B,ON6bK8Z,IACA,SAAU1b,EAAQwD,GOxmDxB,GAAAmY,IACAC,MAAA,sBACAC,QAAA,sBACAC,WAAA,sBACAC,SAAA,sBACAxJ,OAAA,uBACAkH,KAAA,uBACAlE,OAAA,uBACA4F,QAAA,uBACA1I,MAAA,uBACA6E,SAAA,uBACAjE,MAAA,uBACA4H,OAAA,uBACAe,SAAA,uBACAvG,MAAA,uBACAwG,SAAA,uBACAC,OAAA,uBACAC,SAAA,uBACAC,UAAA,uBACAC,QAAA,uBACAC,WAAA,uBACAC,QAAA,uBACAC,SAAA,uBACAC,WAAA,uBAEAtc,QAAAuc,KAAAf,GAAAtU,QAAA,SAAAzE,GACAzC,OAAAC,eAAAgJ,OAAAxC,UAAAhE,GACA+Z,IAAA,WAAqB,MAAAhB,GAAA/Y,GAAA,GAAAoB,KAAA2X,EAAA/Y,GAAA,IACrBga,YAAA","file":"static/js/10.ad145f08.chunk.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ 148:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styletron_react__ = __webpack_require__(147);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styletron_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styletron_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_colors__ = __webpack_require__(556);\nvar Block=Object(__WEBPACK_IMPORTED_MODULE_0_styletron_react__[\"styled\"])('div',function(props){return{minWidth:'16px',height:'16px',display:'inline-block',textAlign:'center',padding:'15px',border:'none',fontWeight:'bold',backgroundColor:props.isPrimary?__WEBPACK_IMPORTED_MODULE_1__utils_colors__[\"a\" /* default */][props.i][1]:__WEBPACK_IMPORTED_MODULE_1__utils_colors__[\"a\" /* default */][props.i][0],':hover':{backgroundColor:'black !important',color:'white'}};});/* harmony default export */ __webpack_exports__[\"default\"] = (Block);\n\n/***/ }),\n\n/***/ 165:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styletron_react__ = __webpack_require__(147);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_styletron_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_styletron_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_colors__ = __webpack_require__(556);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__config__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Block__ = __webpack_require__(148);\nvar components=[];var _loop=function _loop(i){var size=Math.round(i/10%1*10);var component=Object(__WEBPACK_IMPORTED_MODULE_0_styletron_react__[\"styled\"])(__WEBPACK_IMPORTED_MODULE_3__Block__[\"default\"],function(props){return{borderSize:size+2+'px ',borderStyle:'solid',borderRadius:size*6+'px',borderColor:props.isPrimary?__WEBPACK_IMPORTED_MODULE_1__utils_colors__[\"a\" /* default */][props.i][0]:__WEBPACK_IMPORTED_MODULE_1__utils_colors__[\"a\" /* default */][props.i][1],':hover':{backgroundColor:'white !important',borderColor:'black !important',color:'black'}};});components.push(component);};for(var i=0;i<__WEBPACK_IMPORTED_MODULE_2__config__[\"a\" /* default */].size;i++){_loop(i);}/* harmony default export */ __webpack_exports__[\"default\"] = (components);\n\n/***/ }),\n\n/***/ 166:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n// Styletron does not support keyframes?\nvar Probe=function Probe(_ref){var onAnimationStart=_ref.onAnimationStart;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{onAnimationStart:onAnimationStart,style:{animation:'1s global-probe'}});};/* harmony default export */ __webpack_exports__[\"default\"] = (Probe);\n\n/***/ }),\n\n/***/ 556:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__config__ = __webpack_require__(71);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tinygradient__ = __webpack_require__(557);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_tinygradient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_tinygradient__);\nvar gradient1=__WEBPACK_IMPORTED_MODULE_1_tinygradient___default.a.rgb(['#43C6AC','#F8FFAE','#fc00ff','#CFDEF3','#3494E6'],__WEBPACK_IMPORTED_MODULE_0__config__[\"a\" /* default */].size);var gradient2=__WEBPACK_IMPORTED_MODULE_1_tinygradient___default.a.rgb(['#dc2430','#c2e59c','#FFB75E','#7b4397','#00dbde'],__WEBPACK_IMPORTED_MODULE_0__config__[\"a\" /* default */].size);/* harmony default export */ __webpack_exports__[\"a\"] = (gradient1.map(function(color,i){return['#'+color.toHex(),'#'+gradient2[i].toHex()];}));\n\n/***/ }),\n\n/***/ 557:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * TinyGradient 0.3.1\n * Copyright 2014-2015 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\n * Licensed under MIT (http://opensource.org/licenses/MIT)\n */\n\n(function(root, factory) {\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = factory(__webpack_require__(558));\n    }\n    else if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(559)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n    else {\n        root.tinygradient = factory(root.tinycolor);\n    }\n}(this, function(tinycolor) {\n    \"use strict\";\n\n    var Utils = {\n        rgba_max: { r: 256, g: 256, b: 256, a: 1 },\n        hsva_max: { h: 360, s: 1, v: 1, a: 1 },\n\n        /**\n         * Linearly compute the step size between start and end (not normalized)\n         * @param {Object} start - rgba or hsva\n         * @param {Object} end - rgba or hsva\n         * @param {Integer} steps - number of desired steps\n         * @return {Object} rgba or hsva\n         */\n        stepize: function(start, end, steps) {\n            var step = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    step[k] = (end[k]-start[k]) / steps;\n                }\n            }\n\n            return step;\n        },\n\n        /**\n         * Compute the final step color\n         * @param {Object} step - rgba or hsva from `stepize`\n         * @param {Object} start - rgba or hsva\n         * @param {Integer} i - color index\n         * @param {Object} max - rgba or hsva of maximum values for each channel\n         * @return {Object} rgba or hsva\n         */\n        interpolate: function(step, start, i, max) {\n            var color = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    color[k] = step[k] * i + start[k];\n                    color[k] = color[k]<0 ? color[k]+max[k] : ( max[k]!=1 ? color[k]%max[k] : color[k] );\n                }\n            }\n\n            return color;\n        },\n\n        /**\n         * Generate gradient with RGBa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        rgb: function(stop1, stop2, steps) {\n            var start = stop1.color.toRgb(),\n                end = stop2.color.toRgb(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                color;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.rgba_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Generate gradient with HSVa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {Boolean} trigonometric - true to step in trigonometric order\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        hsv: function(stop1, stop2, steps, trigonometric) {\n            var start = stop1.color.toHsv(),\n                end = stop2.color.toHsv(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                diff, color;\n\n            // recompute hue\n            if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {\n                diff = end.h-start.h;\n            }\n            else if (trigonometric) {\n                diff = 360-end.h+start.h;\n            }\n            else {\n                diff = 360-start.h+end.h;\n            }\n            step.h = Math.pow(-1, trigonometric) * Math.abs(diff)*1.0 / steps;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.hsva_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Compute substeps between each stops\n         * @param {Object[]} stops\n         * @param {Integer} steps\n         * @return {Integer[]}\n         */\n        substeps: function(stops, steps) {\n            var l = stops.length;\n\n            // validation\n            steps = parseInt(steps);\n\n            if (isNaN(steps) || steps < 2) {\n                throw new Error('Invalid number of steps (< 2)');\n            }\n            if (steps < l) {\n                throw new Error('Number of steps cannot be inferior to number of stops');\n            }\n\n            // compute substeps from stop positions\n            var substeps = [];\n\n            for (var i=1; i<l; i++) {\n                var step = (steps-1) * (stops[i].pos-stops[i-1].pos);\n                substeps.push(Math.max(1, Math.round(step)));\n            }\n\n            // adjust number of steps\n            var totalSubsteps = 1;\n            for (var n=l-1; n--;) totalSubsteps+= substeps[n];\n\n            while (totalSubsteps != steps) {\n                if (totalSubsteps < steps) {\n                    var min = Math.min.apply(null, substeps);\n                    substeps[substeps.indexOf(min)]++;\n                    totalSubsteps++;\n                }\n                else {\n                    var max = Math.max.apply(null, substeps);\n                    substeps[substeps.indexOf(max)]--;\n                    totalSubsteps--;\n                }\n            }\n\n            return substeps;\n        }\n    };\n\n    /**\n     * @class tinygradient\n     * @param {mixed} stops\n     */\n    var TinyGradient = function(stops) {\n        // varargs\n        if (arguments.length == 1) {\n            if (!(arguments[0] instanceof Array)) {\n                throw new Error('\"stops\" is not an array');\n            }\n            stops = arguments[0];\n        }\n        else {\n            stops = Array.prototype.slice.call(arguments);\n        }\n\n        // if we are called as a function, call using new instead\n        if (!(this instanceof TinyGradient)) {\n            return new TinyGradient(stops);\n        }\n\n        // validation\n        if (stops.length < 2) {\n            throw new Error('Invalid number of stops (< 2)');\n        }\n\n        var havingPositions = stops[0].pos !== undefined,\n            l = stops.length,\n            p = -1;\n        // create tinycolor objects and clean positions\n        this.stops = stops.map(function(stop, i) {\n            var hasPosition = stop.pos !== undefined;\n            if (havingPositions ^ hasPosition) {\n                throw new Error('Cannot mix positionned and not posionned color stops');\n            }\n\n            if (hasPosition) {\n                stop = {\n                    color: tinycolor(stop.color),\n                    pos: stop.pos\n                };\n\n                if (stop.pos < 0 || stop.pos > 1) {\n                    throw new Error('Color stops positions must be between 0 and 1');\n                }\n                else if (stop.pos <= p) {\n                    throw new Error('Color stops positions are not ordered');\n                }\n                p = stop.pos;\n            }\n            else {\n                stop = {\n                    color: tinycolor(stop),\n                    pos: i/(l-1)\n                };\n            }\n\n            return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n            this.stops.unshift({\n                color: this.stops[0].color,\n                pos: 0\n            });\n        }\n        if (this.stops[this.stops.length-1].pos !== 1) {\n            this.stops.push({\n                color: this.stops[this.stops.length-1].color,\n                pos: 1\n            });\n        }\n    };\n\n    /**\n     * Return new instance with reversed stops\n     * @return {tinygradient}\n     */\n    TinyGradient.prototype.reverse = function() {\n        var stops = [];\n\n        this.stops.forEach(function(stop) {\n            stops.push({\n                color: stop.color,\n                pos: 1 - stop.pos\n            });\n        });\n\n        return new TinyGradient(stops.reverse());\n    };\n\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {Integer} steps\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.rgb = function(steps) {\n        var substeps = Utils.substeps(this.stops, steps),\n            gradient = [];\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {Integer} steps\n     * @param {Boolean|String} [mode=false]\n     *    - false to step in clockwise\n     *    - true to step in trigonometric order\n     *    - 'short' to use the shortest way\n     *    - 'long' to use the longest way\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.hsv = function(steps, mode) {\n        var substeps = Utils.substeps(this.stops, steps),\n            trigonometric = mode === true,\n            parametrized = typeof mode === 'string',\n            gradient = [],\n            start, end, trig;\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            start = this.stops[i].color.toHsv();\n            end = this.stops[i+1].color.toHsv();\n                \n            if (parametrized) {\n                trig = (start.h < end.h && end.h-start.h < 180) || (start.h > end.h && start.h-end.h > 180);\n            }\n            \n            // rgb interpolation if one of the steps in grayscale\n            if (start.s===0 || end.s===0) {\n                gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n            }\n            else {\n                gradient = gradient.concat(Utils.hsv(this.stops[i], this.stops[i+1], substeps[i],\n                  (mode==='long' && trig) || (mode==='short' && !trig) || (!parametrized && trigonometric)\n                ));\n            }\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate CSS3 command (no prefix) for this gradient\n     * @param {String} [mode=linear] - 'linear' or 'radial'\n     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n     * @return {String}\n     */\n    TinyGradient.prototype.css = function(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode=='linear' ? 'to right' : 'ellipse at center');\n\n        var css = mode + '-gradient(' + direction;\n        this.stops.forEach(function(stop) {\n            css+= ', ' + stop.color.toRgbString() + ' ' + (stop.pos*100) + '%';\n        });\n        css+= ')';\n        return css;\n    };\n\n\n    /**\n     * Initialize and create gradient with RGBa interpolation\n     * @see TinyGradient::rgb\n     */\n    TinyGradient.rgb = function(colors, steps) {\n        colors = Array.prototype.slice.call(arguments);\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).rgb(steps);\n    };\n\n    /**\n     * Initialize and create gradient with HSVa interpolation\n     * @see TinyGradient::hsv\n     */\n    TinyGradient.hsv = function(colors, steps, mode) {\n        colors = Array.prototype.slice.call(arguments);\n        mode = colors.pop();\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).hsv(steps, mode);\n    };\n\n    /**\n     * Initialize and generate CSS3 command for gradient\n     * @see TinyGradient::css\n     */\n    TinyGradient.css = function(colors, mode, direction) {\n        colors = Array.prototype.slice.call(arguments);\n        direction = colors.pop();\n        mode = colors.pop();\n\n        return TinyGradient.apply(null, colors).css(mode, direction);\n    };\n\n\n    // export\n    return TinyGradient;\n}));\n\n/***/ }),\n\n/***/ 558:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n\n\n/***/ }),\n\n/***/ 559:\n/***/ (function(module, exports) {\n\nvar styles = {\n  'bold':      ['\\033[1m', '\\033[22m'],\n  'italic':    ['\\033[3m', '\\033[23m'],\n  'underline': ['\\033[4m', '\\033[24m'],\n  'inverse':   ['\\033[7m', '\\033[27m'],\n  'black':     ['\\033[30m', '\\033[39m'],\n  'red':       ['\\033[31m', '\\033[39m'],\n  'green':     ['\\033[32m', '\\033[39m'],\n  'yellow':    ['\\033[33m', '\\033[39m'],\n  'blue':      ['\\033[34m', '\\033[39m'],\n  'magenta':   ['\\033[35m', '\\033[39m'],\n  'cyan':      ['\\033[36m', '\\033[39m'],\n  'white':     ['\\033[37m', '\\033[39m'],\n  'default':   ['\\033[39m', '\\033[39m'],\n  'grey':      ['\\033[90m', '\\033[39m'],\n  'bgBlack':   ['\\033[40m', '\\033[49m'],\n  'bgRed':     ['\\033[41m', '\\033[49m'],\n  'bgGreen':   ['\\033[42m', '\\033[49m'],\n  'bgYellow':  ['\\033[43m', '\\033[49m'],\n  'bgBlue':    ['\\033[44m', '\\033[49m'],\n  'bgMagenta': ['\\033[45m', '\\033[49m'],\n  'bgCyan':    ['\\033[46m', '\\033[49m'],\n  'bgWhite':   ['\\033[47m', '\\033[49m'],\n  'bgDefault': ['\\033[49m', '\\033[49m']\n}\nObject.keys(styles).forEach(function(style) {\n  Object.defineProperty(String.prototype, style, {\n    get: function() { return styles[style][0] + this + styles[style][1]; },\n    enumerable: false\n  });\n});\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/10.ad145f08.chunk.js","import { styled } from 'styletron-react';\r\nimport colors from '../../utils/colors';\r\n\r\nconst Block = styled('div', props => ({\r\n  minWidth: '16px',\r\n  height: '16px',\r\n  display: 'inline-block',\r\n  textAlign: 'center',\r\n  padding: '15px',\r\n  border: 'none',\r\n  fontWeight: 'bold',\r\n  backgroundColor: props.isPrimary ? colors[props.i][1] : colors[props.i][0],\r\n  ':hover': {\r\n    backgroundColor: 'black !important',\r\n    color: 'white',\r\n  },\r\n}));\r\n\r\nexport default Block;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/scenes/Styletron/Block.js","import { styled } from 'styletron-react';\r\nimport colors from '../../utils/colors';\r\nimport config from '../../config';\r\nimport Block from './Block';\r\n\r\nconst components = [];\r\n\r\nfor (let i = 0; i < config.size; i++) {\r\n  let size = Math.round(((i / 10) % 1) * 10);\r\n\r\n  const component = styled(Block, props => ({\r\n    borderSize: `${size + 2}px `,\r\n    borderStyle: 'solid',\r\n    borderRadius: `${size * 6}px`,\r\n    borderColor: props.isPrimary ? colors[props.i][0] : colors[props.i][1],\r\n    ':hover': {\r\n      backgroundColor: 'white !important',\r\n      borderColor: 'black !important',\r\n      color: 'black',\r\n    },\r\n  }));\r\n\r\n  components.push(component);\r\n}\r\n\r\nexport default components;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/scenes/Styletron/DifferentBlocks.js","import React from 'react';\r\n\r\n// Styletron does not support keyframes?\r\nconst Probe = ({ onAnimationStart }) => {\r\n  return (\r\n    <div\r\n      onAnimationStart={onAnimationStart}\r\n      style={{ animation: '1s global-probe' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Probe;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/scenes/Styletron/Probe.js","import config from '../config';\r\nimport tinygradient from 'tinygradient';\r\n\r\nvar gradient1 = tinygradient.rgb(\r\n  ['#43C6AC', '#F8FFAE', '#fc00ff', '#CFDEF3', '#3494E6'],\r\n  config.size\r\n);\r\n\r\nvar gradient2 = tinygradient.rgb(\r\n  ['#dc2430', '#c2e59c', '#FFB75E', '#7b4397', '#00dbde'],\r\n  config.size\r\n);\r\n\r\nexport default gradient1.map((color, i) => {\r\n  return [`#${color.toHex()}`, `#${gradient2[i].toHex()}`];\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/colors.js","/*!\n * TinyGradient 0.3.1\n * Copyright 2014-2015 Damien \"Mistic\" Sorel (http://www.strangeplanet.fr)\n * Licensed under MIT (http://opensource.org/licenses/MIT)\n */\n\n(function(root, factory) {\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = factory(require('tinycolor2'));\n    }\n    else if (typeof define === 'function' && define.amd) {\n        define(['tinycolor'], factory);\n    }\n    else {\n        root.tinygradient = factory(root.tinycolor);\n    }\n}(this, function(tinycolor) {\n    \"use strict\";\n\n    var Utils = {\n        rgba_max: { r: 256, g: 256, b: 256, a: 1 },\n        hsva_max: { h: 360, s: 1, v: 1, a: 1 },\n\n        /**\n         * Linearly compute the step size between start and end (not normalized)\n         * @param {Object} start - rgba or hsva\n         * @param {Object} end - rgba or hsva\n         * @param {Integer} steps - number of desired steps\n         * @return {Object} rgba or hsva\n         */\n        stepize: function(start, end, steps) {\n            var step = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    step[k] = (end[k]-start[k]) / steps;\n                }\n            }\n\n            return step;\n        },\n\n        /**\n         * Compute the final step color\n         * @param {Object} step - rgba or hsva from `stepize`\n         * @param {Object} start - rgba or hsva\n         * @param {Integer} i - color index\n         * @param {Object} max - rgba or hsva of maximum values for each channel\n         * @return {Object} rgba or hsva\n         */\n        interpolate: function(step, start, i, max) {\n            var color = {};\n\n            for (var k in start) {\n                if (start.hasOwnProperty(k)) {\n                    color[k] = step[k] * i + start[k];\n                    color[k] = color[k]<0 ? color[k]+max[k] : ( max[k]!=1 ? color[k]%max[k] : color[k] );\n                }\n            }\n\n            return color;\n        },\n\n        /**\n         * Generate gradient with RGBa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        rgb: function(stop1, stop2, steps) {\n            var start = stop1.color.toRgb(),\n                end = stop2.color.toRgb(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                color;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.rgba_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Generate gradient with HSVa interpolation\n         * @param {Object} stop1\n         * @param {Object} stop2\n         * @param {Integer} steps\n         * @param {Boolean} trigonometric - true to step in trigonometric order\n         * @param {tinycolor[]} color1 included, color2 excluded\n         */\n        hsv: function(stop1, stop2, steps, trigonometric) {\n            var start = stop1.color.toHsv(),\n                end = stop2.color.toHsv(),\n                gradient = [stop1.color],\n                step = Utils.stepize(start, end, steps),\n                diff, color;\n\n            // recompute hue\n            if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {\n                diff = end.h-start.h;\n            }\n            else if (trigonometric) {\n                diff = 360-end.h+start.h;\n            }\n            else {\n                diff = 360-start.h+end.h;\n            }\n            step.h = Math.pow(-1, trigonometric) * Math.abs(diff)*1.0 / steps;\n\n            for (var i=1; i<steps; i++) {\n                color = Utils.interpolate(step, start, i, Utils.hsva_max);\n                gradient.push(tinycolor(color));\n            }\n\n            return gradient;\n        },\n\n        /**\n         * Compute substeps between each stops\n         * @param {Object[]} stops\n         * @param {Integer} steps\n         * @return {Integer[]}\n         */\n        substeps: function(stops, steps) {\n            var l = stops.length;\n\n            // validation\n            steps = parseInt(steps);\n\n            if (isNaN(steps) || steps < 2) {\n                throw new Error('Invalid number of steps (< 2)');\n            }\n            if (steps < l) {\n                throw new Error('Number of steps cannot be inferior to number of stops');\n            }\n\n            // compute substeps from stop positions\n            var substeps = [];\n\n            for (var i=1; i<l; i++) {\n                var step = (steps-1) * (stops[i].pos-stops[i-1].pos);\n                substeps.push(Math.max(1, Math.round(step)));\n            }\n\n            // adjust number of steps\n            var totalSubsteps = 1;\n            for (var n=l-1; n--;) totalSubsteps+= substeps[n];\n\n            while (totalSubsteps != steps) {\n                if (totalSubsteps < steps) {\n                    var min = Math.min.apply(null, substeps);\n                    substeps[substeps.indexOf(min)]++;\n                    totalSubsteps++;\n                }\n                else {\n                    var max = Math.max.apply(null, substeps);\n                    substeps[substeps.indexOf(max)]--;\n                    totalSubsteps--;\n                }\n            }\n\n            return substeps;\n        }\n    };\n\n    /**\n     * @class tinygradient\n     * @param {mixed} stops\n     */\n    var TinyGradient = function(stops) {\n        // varargs\n        if (arguments.length == 1) {\n            if (!(arguments[0] instanceof Array)) {\n                throw new Error('\"stops\" is not an array');\n            }\n            stops = arguments[0];\n        }\n        else {\n            stops = Array.prototype.slice.call(arguments);\n        }\n\n        // if we are called as a function, call using new instead\n        if (!(this instanceof TinyGradient)) {\n            return new TinyGradient(stops);\n        }\n\n        // validation\n        if (stops.length < 2) {\n            throw new Error('Invalid number of stops (< 2)');\n        }\n\n        var havingPositions = stops[0].pos !== undefined,\n            l = stops.length,\n            p = -1;\n        // create tinycolor objects and clean positions\n        this.stops = stops.map(function(stop, i) {\n            var hasPosition = stop.pos !== undefined;\n            if (havingPositions ^ hasPosition) {\n                throw new Error('Cannot mix positionned and not posionned color stops');\n            }\n\n            if (hasPosition) {\n                stop = {\n                    color: tinycolor(stop.color),\n                    pos: stop.pos\n                };\n\n                if (stop.pos < 0 || stop.pos > 1) {\n                    throw new Error('Color stops positions must be between 0 and 1');\n                }\n                else if (stop.pos <= p) {\n                    throw new Error('Color stops positions are not ordered');\n                }\n                p = stop.pos;\n            }\n            else {\n                stop = {\n                    color: tinycolor(stop),\n                    pos: i/(l-1)\n                };\n            }\n\n            return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n            this.stops.unshift({\n                color: this.stops[0].color,\n                pos: 0\n            });\n        }\n        if (this.stops[this.stops.length-1].pos !== 1) {\n            this.stops.push({\n                color: this.stops[this.stops.length-1].color,\n                pos: 1\n            });\n        }\n    };\n\n    /**\n     * Return new instance with reversed stops\n     * @return {tinygradient}\n     */\n    TinyGradient.prototype.reverse = function() {\n        var stops = [];\n\n        this.stops.forEach(function(stop) {\n            stops.push({\n                color: stop.color,\n                pos: 1 - stop.pos\n            });\n        });\n\n        return new TinyGradient(stops.reverse());\n    };\n\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {Integer} steps\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.rgb = function(steps) {\n        var substeps = Utils.substeps(this.stops, steps),\n            gradient = [];\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {Integer} steps\n     * @param {Boolean|String} [mode=false]\n     *    - false to step in clockwise\n     *    - true to step in trigonometric order\n     *    - 'short' to use the shortest way\n     *    - 'long' to use the longest way\n     * @return {tinycolor[]}\n     */\n    TinyGradient.prototype.hsv = function(steps, mode) {\n        var substeps = Utils.substeps(this.stops, steps),\n            trigonometric = mode === true,\n            parametrized = typeof mode === 'string',\n            gradient = [],\n            start, end, trig;\n\n        for (var i=0, l=this.stops.length; i<l-1; i++) {\n            start = this.stops[i].color.toHsv();\n            end = this.stops[i+1].color.toHsv();\n                \n            if (parametrized) {\n                trig = (start.h < end.h && end.h-start.h < 180) || (start.h > end.h && start.h-end.h > 180);\n            }\n            \n            // rgb interpolation if one of the steps in grayscale\n            if (start.s===0 || end.s===0) {\n                gradient = gradient.concat(Utils.rgb(this.stops[i], this.stops[i+1], substeps[i]));\n            }\n            else {\n                gradient = gradient.concat(Utils.hsv(this.stops[i], this.stops[i+1], substeps[i],\n                  (mode==='long' && trig) || (mode==='short' && !trig) || (!parametrized && trigonometric)\n                ));\n            }\n        }\n\n        gradient.push(this.stops[l-1].color);\n\n        return gradient;\n    };\n\n    /**\n     * Generate CSS3 command (no prefix) for this gradient\n     * @param {String} [mode=linear] - 'linear' or 'radial'\n     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n     * @return {String}\n     */\n    TinyGradient.prototype.css = function(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode=='linear' ? 'to right' : 'ellipse at center');\n\n        var css = mode + '-gradient(' + direction;\n        this.stops.forEach(function(stop) {\n            css+= ', ' + stop.color.toRgbString() + ' ' + (stop.pos*100) + '%';\n        });\n        css+= ')';\n        return css;\n    };\n\n\n    /**\n     * Initialize and create gradient with RGBa interpolation\n     * @see TinyGradient::rgb\n     */\n    TinyGradient.rgb = function(colors, steps) {\n        colors = Array.prototype.slice.call(arguments);\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).rgb(steps);\n    };\n\n    /**\n     * Initialize and create gradient with HSVa interpolation\n     * @see TinyGradient::hsv\n     */\n    TinyGradient.hsv = function(colors, steps, mode) {\n        colors = Array.prototype.slice.call(arguments);\n        mode = colors.pop();\n        steps = colors.pop();\n\n        return TinyGradient.apply(null, colors).hsv(steps, mode);\n    };\n\n    /**\n     * Initialize and generate CSS3 command for gradient\n     * @see TinyGradient::css\n     */\n    TinyGradient.css = function(colors, mode, direction) {\n        colors = Array.prototype.slice.call(arguments);\n        direction = colors.pop();\n        mode = colors.pop();\n\n        return TinyGradient.apply(null, colors).css(mode, direction);\n    };\n\n\n    // export\n    return TinyGradient;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tinygradient/tinygradient.js\n// module id = 557\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12","// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tinycolor2/tinycolor.js\n// module id = 558\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12","var styles = {\n  'bold':      ['\\033[1m', '\\033[22m'],\n  'italic':    ['\\033[3m', '\\033[23m'],\n  'underline': ['\\033[4m', '\\033[24m'],\n  'inverse':   ['\\033[7m', '\\033[27m'],\n  'black':     ['\\033[30m', '\\033[39m'],\n  'red':       ['\\033[31m', '\\033[39m'],\n  'green':     ['\\033[32m', '\\033[39m'],\n  'yellow':    ['\\033[33m', '\\033[39m'],\n  'blue':      ['\\033[34m', '\\033[39m'],\n  'magenta':   ['\\033[35m', '\\033[39m'],\n  'cyan':      ['\\033[36m', '\\033[39m'],\n  'white':     ['\\033[37m', '\\033[39m'],\n  'default':   ['\\033[39m', '\\033[39m'],\n  'grey':      ['\\033[90m', '\\033[39m'],\n  'bgBlack':   ['\\033[40m', '\\033[49m'],\n  'bgRed':     ['\\033[41m', '\\033[49m'],\n  'bgGreen':   ['\\033[42m', '\\033[49m'],\n  'bgYellow':  ['\\033[43m', '\\033[49m'],\n  'bgBlue':    ['\\033[44m', '\\033[49m'],\n  'bgMagenta': ['\\033[45m', '\\033[49m'],\n  'bgCyan':    ['\\033[46m', '\\033[49m'],\n  'bgWhite':   ['\\033[47m', '\\033[49m'],\n  'bgDefault': ['\\033[49m', '\\033[49m']\n}\nObject.keys(styles).forEach(function(style) {\n  Object.defineProperty(String.prototype, style, {\n    get: function() { return styles[style][0] + this + styles[style][1]; },\n    enumerable: false\n  });\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tinycolor/tinycolor.js\n// module id = 559\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12"],"sourceRoot":""}